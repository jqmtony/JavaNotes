------远程调用------

1.HTTP显式调用

$.post("接口地址",{},function(resp){},"jsonp");
restTemplate.get("接口地址");

2.RPC式调用-分布式架构的雏形

将远程调用伪装成本地调用的方式

@Autowired
ProductService productServie;

public void m1(){
 productServie.业务操作();---该步骤连接远端服务
}

------分布式架构------

注册中心

提供者(被调用方)
-有接口有实现类

消费者(调用方)
-只有接口没有实现类

@Autowired
注入接口对象

1.主流的分布式架构方案
-dubbo+zookeeper
*-spring-cloud+eureka

------分布式架构的发展史------

1.webservice-最古老的RPC远程调用
(CXF)
(需要用命令行生成本地代理代码，不够灵活。)
(消费者直接调用生产者，没有注册中心，没有服务治理。)

2.现代RPC框架
(Dubbo/SpringCloud)
(不再需要生成本地代理代码、都通过Spring环境注入代理对象。)
(引入了注册中心，便于管理服务群。)
(有了很多如负载均衡，死链移除，断路器/熔断器等机制)

------MQ消息队列------
常用的MQ中间件
-ActiveMQ
-RocketMQ
-Kafka

1.使用背景
(任务耗时较长时 变阻塞式处理为非阻塞式处理)
(跟多线程new Thread()方式做对比)
(多个系统间传递消息)

2.队列模式/主题模式
-队列模式下:消息在未消费前不会消失/一个消息只能由一个消费者消费/消费完成消息删除
-主题模式下:消息发布时须即时订阅 否则消失/一个消息可同时被一群订阅者接收(广播)/消息发布后即消失 无论有没有被订阅

3.消费端的同步接收/异步接收
同步接收-消费端主动接收
异步接收-观察者模式-监听式接收

------关于Redis/MQ的持久化模式------

redis的持久化模式:
-高频率存取操作发生在内存/一定间隔写入硬盘备份
-写入硬盘备份又有两种方式RDB/AOF

------SpringBoot------

1.SpringBoot=SpringMVC+Spring+轻量化配置等其他改良






