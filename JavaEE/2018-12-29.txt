一.学习方法

1.先理流程/思路->后摸索代码实现
(文字表述)
(伪代码)

Interceptor{
  if(判断session-admin){
       return true;
  }

  跳转/login
  return false;
}

举例:
拦截器->判断session["admin"]是否为空->不空就放行/空就引导至登录界面
登录动作:连接db判断登录信息是否正确->不正确就登录失败/正确时登录成功 保存session["admin"]

2.经典流程反复写-10遍8遍不算多
对着上一条理出的思路流程
一步一步实现代码(过程中可以各种上网查找拼凑/对着console调错改错)
实现完成，思路如仍然不清晰，果断删除，重新回到第一步理流程思路，第二步实现代码，然后继续。
反复多遍的写，直到思路清晰，能够自如变化为止。。再去练下一个demo

3.每天的内容，在当天或1-3天内尽快练习到思路畅通，也就是充分消化。
而不是保存到硬盘了事。

举例:
继承实现->多态->反射工厂

二.学习理念

*关于学习内容-分为两类:
1.只存在知不知道，不存在懂不懂。->在企业眼里不值钱，因为到处可查。
2.关键在于懂不懂，即使所有资料全给你，你统统知道，也不一定能完成任务。->在企业眼里是值钱的，因为难以得到。

能力的重要性>>知识

1.把一个复杂的问题，拆分为多个简单的小问题。

2.问题的归类 分步思路的归纳。

3.对于实践中发现的一些规律的总结，再利用。

4.对于任务实现过程中问题的预测，推断。对他人意图的推断。等等。

5.对于多种解决方案的利弊取舍。

。。。

综合工作能力-解决问题的能力是最重要的。

*关于学习顺序
打破所谓的循序渐进/先花时间扎马步才能作后续学习等等不正确观点

1.用最简单直接的方式，看起步文档，模仿起步demo，上手再说。
(核心用法先用起来，应付工作。一边工作一边深入。)
(先下手为强)

2.总结公式
while(true){
 实践();
 探索();
 总结();---写博客---回头以更好的方式做进一步实践探索
 sleep(1000);
}








